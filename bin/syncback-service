#!/usr/bin/env python
"""
Run the syncback service separately. You should run this if you run the
API under something like gunicorn. (For convenience, the bin/inbox-api script
also starts up the syncback service.)

"""
import sys
import signal
from setproctitle import setproctitle
setproctitle('inbox_syncback_service')

import click
from gevent import monkey
monkey.patch_all()

syncback = None


def signal_handler(signum, frame):
    print 'Signal handler called with signal', signum
    syncback.stop()
    sys.stdout.flush()


@click.command()
@click.option('--env', type=click.Choice(['prod', 'dev', 'test']),
              default='dev',
              help='Loads the corresponding config file for the env.')
def main(env):
    """ Launch the actions syncback service. """
    # Load config, make checks before anything
    from inbox.util.startup import preflight
    preflight(env)

    from inbox.log import configure_logging

    is_prod = True if env == 'prod' else False
    configure_logging(is_prod)

    if is_prod:
        start()
    else:
        from werkzeug.serving import run_with_reloader
        run_with_reloader(start)


def start():
    from inbox.transactions.actions import SyncbackService

    global syncback

    # Catch SIGTERM so that we can gracefully exit
    signal.signal(signal.SIGTERM, signal_handler)

    # Start the syncback service, and just hang out forever
    syncback = SyncbackService()
    syncback.start()
    syncback.join()

if __name__ == '__main__':
    main()
