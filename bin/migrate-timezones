#!/usr/bin/env python
import math
import multiprocessing
import click
from datetime import datetime
from sqlalchemy.orm import load_only
from inbox.models import Message
from inbox.models.event import RecurringEvent
from inbox.config import config
from inbox.events.timezones import windows_timezones
from nylas.logging import configure_logging, get_logger
configure_logging(config.get('LOGLEVEL'))


CHUNK_SIZE = 1000
SINCE = datetime(2015, 07, 01)


def migrate_timezones(namespace_id):
    from inbox.models.session import session_scope
    log = get_logger()
    with session_scope(versioned=False) as db_session:
        events = db_session.query(RecurringEvent).filter(
            RecurringEvent.created_at >= SINCE,
            RecurringEvent.namespace_id == namespace_id).options(load_only('start_timezone'))

        for event in events:
            event_tz = event.start_timezone
            if event_tz in windows_timezones:
                event.start_timezone = windows_timezones[event_tz]

        db_session.commit()
        log.info('Migrated events', namespace_id=namespace_id)


@click.command()
@click.option('--jobs', '-j', type=int, default=1)
@click.option('--max-id', '-m', type=int)
@click.option('--min-id', '-n', type=int, default=0)
def main(jobs, max_id, min_id):
    buckets = [id for id in range(min_id, max_id)]
    pool = multiprocessing.Pool(jobs)
    pool.map(migrate_timezones, buckets)


if __name__ == '__main__':
    main()
