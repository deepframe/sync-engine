#!/usr/bin/env python

import click
import time
from functools import partial
from json import dumps
from sys import exit

from inbox.heartbeat.status import get_heartbeat_status, \
    get_account_timestamps, get_account_summary, heartbeat_summary


def print_heartbeat_status(status, verbose):
    summary = {'verbose': []}

    for account_id, account in status.iteritems():
        if account.missing:
            continue

        if account.alive and not verbose:
            continue

        account_summary = account.jsonify()
        summary['verbose'].append(account_summary)

    return summary


@click.command()
@click.option('--host', '-h', type=str)
@click.option('--port', '-p', type=int, default=6379)
@click.option('--account-id', '-a', type=int)
@click.option('--pretty', is_flag=True)
@click.option('--verbose', '-v', is_flag=True, default=True)
@click.option('--debug', '-d', is_flag=True, default=False)
def main(host, port, account_id, pretty, verbose, debug):
    if debug:
        now = time.time()
        hs = get_account_timestamps(host, port, account_id)
        for (acc, ts) in hs:
            if ts:
                print "Oldest heart for {}: {:.0f}s ago".format(acc, now - ts)
            else:
                print "No heartbeat for {} in store.".format(acc)
            folders = get_account_summary(host, port, acc)
            for (f, ts) in folders:
                print " Folder {} : {:.0f}s ago".format(f, now - ts)
        exit(0)

    status = get_heartbeat_status(host, port, account_id)

    if not pretty:
        _dumps = partial(dumps, sort_keys=True)
    else:
        _dumps = partial(dumps, sort_keys=True, indent=2)

    summary = heartbeat_summary(host, port)
    if summary['dead_accounts'] == 0 and not verbose:
        print _dumps(summary)
        exit(0)
    summary.update(print_heartbeat_status(status, verbose))
    print _dumps(summary)
    exit(2)


if __name__ == '__main__':
    main()
