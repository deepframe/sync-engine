#!/usr/bin/env python
import click

from boto import ec2

from inbox.scheduling.queue import QueueClient


def get_zone_for_instance(hostname):
    conn = ec2.connect_to_region('us-west-2')

    instances = []
    for r in conn.get_all_instances():
        for i in r.instances:
            instances.append(i)

    instances = [i for i in instances if i.tags.get('Name') == hostname and
                 i.tags.get('Role') == 'sync']

    if not instances:
        raise Exception("No sync host with hostname '{}'".format(hostname))

    assert len(instances) == 1

    return instances[0].placement


@click.command()
@click.option('--dry-run', is_flag=True, default=False)
@click.argument('hostname')
def main(dry_run, hostname):
    """
    Unschedule all accounts assigned to a given sync host.
    Intended primarily for use when decomissioning sync instances.

    """
    zone = get_zone_for_instance(hostname)
    qc = QueueClient(zone)
    # hosts in redis are of the format hostname:<cpu_id>
    to_unschedule = [(account_id, host) for account_id, host in
                     qc.assigned().items() if host.startswith(hostname)]

    if to_unschedule:
        if dry_run:
            for account_id, host in to_unschedule:
                print "Would unassign", account_id
        else:
            for account_id, host in to_unschedule:
                print "Unassigning", account_id
                qc.unassign(account_id, host)
    else:
        print "No syncs to unschedule for", hostname

if __name__ == '__main__':
    main()
