#!/usr/bin/env python

import sys
import os
import time

import click

from inbox.models.account import Account
from inbox.models.session import session_scope as mailsync_session_scope
from inbox.mailsync.service import SyncService
from nylas.logging import get_logger

# Warning! Since it is not easy to determine the number of CPUs on remote
# boxes without (1) storing it in the db or (2) sshing into boxes
# im assuming that all sync boxes have 16 cores. If this is not correct
# for your use case, please update the necessary environment variables.
FROM_TOTAL_CORES = os.environ.get("FROM_TOTAL_CORES", 16)

log = get_logger()


@click.command()
@click.option('--from-host', '-f', type=str, required=True)
@click.option('--to-host', '-h', type=str, required=True)
@click.option('--num-accounts', '-n', type=int, required=True)
@click.option('--from-core', '-s', type=int, required=True)
def main(from_host, to_host, num_accounts, from_core):
    with mailsync_session_scope() as mailsync_session:
        accounts_to_move = mailsync_session.query(Account) \
            .filter(
                Account.sync_should_run,
                Account.sync_host == from_host,
                SyncService.account_cpu_filter(from_core,
                                               FROM_TOTAL_CORES)) \
            .order_by(Account.id) \
            .limit(num_accounts).all()

        print "\n".join([a.email_address for a in accounts_to_move])
        if raw_input("Moving Accounts. Proceed? [Y/n]") == "n":
            print "Exiting"
            sys.exit(0)

        for account in accounts_to_move:
            account.disable_sync(reason='Migrating')

        mailsync_session.commit()

        # wait until sync is stopped
        max_wait_attempts = 20
        cur_wait_attempts = 0
        while any([a.is_running for a in accounts_to_move]) \
              and cur_wait_attempts <= max_wait_attempts:
            for account in accounts_to_move:
                mailsync_session.refresh(account)
            cur_wait_attempts += 1
            time.sleep(5)

        accounts_failed = [a for a in accounts_to_move if a.is_running]
        accounts_to_enable = list(set(accounts_to_move) - set(accounts_failed))

        for account in accounts_to_move:
            account.enable_sync(to_host)

        mailsync_session.commit()

        if accounts_failed:
            print "Failed Accounts:"
            print "\n".join([a.email_address for a in accounts_failed])

        print "Successfully moved accounts:"
        print "\n".join([a.email_address for a in accounts_to_enable])


if __name__ == "__main__":
    main()
