#!/usr/bin/env python
from setproctitle import setproctitle; setproctitle('inbox-syncmgr')

import sys
import platform

import click

# Check that the inbox package is installed. It seems Vagrant may sometimes
# fail to provision the box appropriately; this check is a reasonable
# approximation of "Did the setup script run?"
try:
    from inbox.config import config
except ImportError:
    sys.exit("Could not find Inbox installation. "
             "Maybe the Vagrant box provisioning didn't succeed?\n"
             "Try running sudo ./setup.sh")

from sqlalchemy.orm.exc import NoResultFound

from inbox.models.session import global_session_scope
from inbox.models import Account


@click.command()
@click.argument('cmd')
@click.argument('email_address', default='')
@click.option('--all', default=False, is_flag=True,
              help='Apply the command to all accounts.')
def main(cmd, email_address, all):
    """ Start/stop mail sync for an account. """

    if (not email_address and not all) or (email_address and all):
        sys.exit('Must either specify an email address or \'--all\'')

    if cmd not in ('start', 'stop'):
        sys.exit('No such command.')

    with global_session_scope() as db_session:
        accounts = []

        if all:
            accounts.extend(db_session.query(Account).all())
        else:
            try:
                account = db_session.query(Account).filter_by(
                    email_address=email_address).one()
                accounts.append(account)
            except NoResultFound:
                sys.exit('No record of account {0}'
                         .format(email_address))

        for account in accounts:
            if cmd == 'start':
                account.enable_sync(platform.node())
                print "Marked account '{}' to start sync on {}.".format(
                    account.email_address, platform.node())
                db_session.add(account)
                db_session.commit()
            elif cmd == 'stop':
                old_host = account.sync_host
                if account.sync_enabled:
                    account.disable_sync()
                    print "Marked account '{}' to stop sync on {}.".format(
                        account.email_address, old_host)
                    db_session.add(account)
                    db_session.commit()
                else:
                    print "Account '{}' is already disabled.".format(
                        account.email_address)

if __name__ == '__main__':
    main()
