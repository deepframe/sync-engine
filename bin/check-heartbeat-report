#!/usr/bin/env python

import click
import json
from sys import exit
from collections import defaultdict

from inbox.heartbeat.status import list_dead_accounts, list_alive_accounts, \
    get_account_metadata

CHECK_INTERVAL = 10 * 60
ALIVE_THRESHOLD = 480


def pretty_print(host, port, dead_list, verbose=False):
    # Group by account providers.
    providers = defaultdict(list)
    for (a, ts) in dead_list:
        # Get account metadata by looking in a folder for it (to avoid a live
        # query to production accounts db)
        (email, provider) = get_account_metadata(host, port, a)
        if verbose:
            providers[provider].append("{} ({})".format(a, email))
        else:
            providers[provider].append(a)

    # Print a per-provider summary
    for provider, deads in providers.iteritems():
        print "{} x {}".format(provider, len(deads)),
    print
    for provider, deads in providers.iteritems():
        print " {}: {}".format(provider, ", ".join(sorted(deads)))


@click.command()
@click.option('--host', '-h', type=str, required=True)
@click.option('--port', '-p', type=int, default=6379)
@click.option('--interval', '-i', type=int, default=CHECK_INTERVAL)
@click.option('--verbose', '-v', is_flag=True, default=False)
@click.option('--summary', '-s', is_flag=True, default=False)
def main(host, port, interval, verbose, summary):
    # Get all the accounts that haven't checked in recently

    new_dead_threshold = interval + ALIVE_THRESHOLD

    num_dead = list_dead_accounts(host, port, ALIVE_THRESHOLD, count=True)

    if num_dead == 0:
        exit(0)

    num_alive = list_alive_accounts(host, port, ALIVE_THRESHOLD, count=True)

    # Accounts dead when we last checked
    old_dead = list_dead_accounts(host, port, new_dead_threshold,
                                  timestamps=True)
    # Accounts dead since we last checked
    new_dead = list_dead_accounts(host, port, ALIVE_THRESHOLD,
                                  new_dead_threshold, timestamps=True)

    if summary:
        host_type = 'staging' if 'staging' in host else 'production'
        old_dead.extend(new_dead)
        print json.dumps({
            "dead": num_dead,
            "new_dead": len(new_dead),
            "alive": num_alive,
            "host": host,
            "host_type": host_type,
            "dead_accounts": " ".join([a for a, _ in sorted(old_dead)]),
            "new_dead_accounts": " ".join([a for a, _ in sorted(new_dead)]),
            "event": "heartbeat"})
        exit(0)

    print "Dead accounts {}/{}: ".format(num_dead, num_dead + num_alive),
    pretty_print(host, port, old_dead)

    if len(new_dead) == 0:
        exit(1)

    print "\nNewly dead accounts: ",
    pretty_print(host, port, new_dead, True)

    exit(2)

if __name__ == '__main__':
    main()
