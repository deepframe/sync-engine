#!/usr/bin/env python
import os
import sys
import argparse

# Check that the inbox package is installed. It seems Vagrant may sometimes
# fail to provision the box appropriately; this check is a reasonable
# approximation of "Did the setup script run?"
try:
    from inbox.config import config
except ImportError:
    sys.exit("Could not find Inbox installation. "
             "Maybe the Vagrant box provisioning didn't succeed?\n"
             "Try running sudo ./setup.sh")

from setproctitle import setproctitle; setproctitle('inbox-api')
from gevent import monkey; monkey.patch_all()
from gevent.pywsgi import WSGIServer

from inbox.api.wsgi import InboxWSGIHandler
from inbox.log import get_logger, configure_logging
from inbox.util.startup import preflight, load_overrides


parser = argparse.ArgumentParser(description='REPL for crispin')
parser.add_argument('-p', '--port', dest='port', default=5555)
parser.add_argument('--prod', action='store_true', default=False,
                    help='Disables the autoreloader and potentially other'
                    ' non-production features.')
parser.add_argument('-c', '--config', dest='config', default=None,
                    help='Path to JSON configuration file.')
args = parser.parse_args()

if args.config:
    config_path = os.path.abspath(args.config)
    # TODO expand to full path
    load_overrides(config_path)

configure_logging(args.prod)

# We need to import this down here, because this in turn imports
# ignition.engine, which has to happen *after* we read any config overrides for
# the database parameters. Boo for imports with side-effects.
from inbox.api.srv import app

preflight()

inbox_logger = get_logger()


def start():
    # start actions service
    from inbox.transactions.actions import SyncbackService
    SyncbackService().start()

    http_server = WSGIServer(('', int(args.port)), app, log=inbox_logger,
                             handler_class=InboxWSGIHandler)
    inbox_logger.info('Starting API server on port {0}'.format(args.port))
    http_server.serve_forever()


if not args.prod:
    from werkzeug.serving import run_with_reloader
    run_with_reloader(start)
else:
    start()
