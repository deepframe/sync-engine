#!/usr/bin/env python
# Because of a bug in IMAPClient, we have 400 production
# accounts with duplicate, badly-encoded labels (https://github.com/nylas/sync-engine/issues/212).
# The bug has since been fixed, but the badly-encoded labels linger even
# though they've been marked as deleted because the sync-engine still sees
# messages with those labels.
#
# This script fixes this by going through the list of accounts, finding such labels
# and refreshing the flags for those. The messages then get affected to the correct
# labels, which cause the bad labels to be GCed.
import re
import click
import gevent
import gevent.monkey
import gevent.pool

from inbox.mailsync.backends.imap import common
from inbox.crispin import connection_pool, FolderMissingError
from inbox.mailsync.backends.imap.generic import uidvalidity_cb

from nylas.logging import get_logger, configure_logging
from inbox.models import Folder
from inbox.util.itert import chunk
from inbox.models.backends.gmail import GmailAccount
from inbox.models.label import Label
from inbox.models.session import session_scope, global_session_scope


configure_logging()
log = get_logger(purpose='labels-refresh')


def refresh_flags(flags, account_id, folder_id):
    with session_scope(account_id) as db_session:
        account = db_session.query(GmailAccount).get(account_id)
        folder = db_session.query(Folder).get(folder_id);
        common.update_metadata(account.id, folder.id,
                               folder.canonical_name, flags,
                               db_session)
        db_session.commit()


def refresh_label(label_id):
    with session_scope(label_id) as db_session:
        label = db_session.query(Label).get(label_id)
        category = label.category
        account = label.account
        folders = db_session.query(Folder).filter(
            Folder.account_id == account.id).all()

        affected_messages = [m.message.g_msgid for m in category.messagecategories]
        db_session.expunge_all()

    if affected_messages == []:
        return

    with connection_pool(account.id).get() as crispin_client:
        for folder in folders:
            log.info('Selecting folder', folder=folder.name)
            try:
                crispin_client.select_folder(folder.name, uidvalidity_cb)
            except FolderMissingError:
                continue

            log.info('Getting uids', account_id=account.id, folder=folder.name)

            for chnk in chunk(affected_messages, 50):
                qs = []
                for g_msgid in chnk:
                    if g_msgid != chnk[-1]:
                        qs.append('OR')

                    qs.append('X-GM-MSGID')
                    qs.append(str(g_msgid))

                uids = crispin_client.search_uids(qs)

                log.info('Getting flags', account_id=account.id,
                         folder=folder.name)
                flags = crispin_client.flags(uids)
                refresh_flags(flags, account.id, folder.id)


@click.command()
@click.option('--min-id', type=int, default=None)
@click.option('--max-id', type=int, default=None)
def main(min_id, max_id):
    gmail_accounts = []
    affected_accounts = []
    affected_labels = []

    # Get the list of running Gmail accounts.
    with global_session_scope() as db_session:
        gmail_accounts = db_session.query(GmailAccount).filter(
            GmailAccount.sync_state == 'running')

        if min_id is not None:
            gmail_accounts = gmail_accounts.filter(
                GmailAccount.id > min_id)

        if max_id is not None:
            gmail_accounts = gmail_accounts.filter(
                GmailAccount.id <= max_id)

        gmail_accounts = gmail_accounts.all()

        db_session.expunge_all()

    print "Total accounts: %d" % len(gmail_accounts)

    # Check whether those accounts have badly encoded labels.
    for account in gmail_accounts:
        with session_scope(account.id) as db_session:
            badly_encoded_labels = False
            utf7_labels = db_session.query(Label).filter(
                Label.account_id == account.id, Label.name.like('%&%'))

            for label in utf7_labels:
                if re.match('.*&[a-zA-Z0-9]*\-', label.name):
                    print label.name, label.id
                    affected_labels.append(label.id)
                    badly_encoded_labels = True

            if badly_encoded_labels:
                affected_accounts.append(account.id)

            db_session.expunge_all()

    print "Affected accounts: %d" % len(affected_accounts)
    print "Affected labels: %s" % affected_labels

    # Now go through all those accounts and refresh the labels.
    label_pool = gevent.pool.Pool(size=5)
    label_pool.map(refresh_label, affected_labels)
    label_pool.join()


if __name__ == '__main__':
    main()
