#!/usr/bin/env python

import sys

import click

from inbox.config import config
from inbox.models.account import Account
from inbox.models.session import session_scope as mailsync_session_scope
from inbox.sendmail.smtp.postel import SMTPConnection, SendMailException

from nylas.logging import configure_logging, get_logger
log = get_logger()


@click.command()
@click.option('--account-id', '-a', type=int, required=False, default=None)
def main(account_id):
    """ Checks that we can auth an SMTP connection for accounts.

    If no account ID is specified, checks all accounts.
    """
    configure_logging(config.get('LOGLEVEL'))

    with mailsync_session_scope() as mailsync_session:
        if account_id is not None:
            account = mailsync_session.query(Account).filter(
                Account.id == account_id,
                Account.provider != 'eas',
            ).first()

            if account is None:
                print "Account {} not found".format(account_id)
                sys.exit(22)

            accounts = [account]
        else:
            accounts = mailsync_session.query(Account)

        seen = set()
        bad = dict()

        for account in accounts:
            try:
                if account.smtp_endpoint not in seen:
                    print "checking account {} ({})".format(
                        account.id, account.smtp_endpoint)
                    seen.add(account.smtp_endpoint)
                    SMTPConnection(account_id=account.account_id,
                                   email_address=account.email_address,
                                   auth_type=account.auth_type,
                                   auth_token=account.auth_token,
                                   smtp_endpoint=account.smtp_endpoint,
                                   log=log)
                else:
                    print "skipping account {} ({})".format(
                        account.id, account.smtp_endpoint)
            except AttributeError:
                # some account types like Exchange don't use SMTP
                pass
            except SendMailException as exc:
                print "Error occurred trying to authenticate SMTP server '{}'",\
                      "for account {}".format(account.smtp_endpoint,
                                              (account.id, exc.message))
                bad.setdefault(account.smtp_endpoint, []).append(account.id)

    print
    if not bad:
        print "Everything OK!"
    else:
        print "Accounts with bad SMTP endpoints:"
        print
        print bad

if __name__ == "__main__":
    main()
