#!/usr/bin/env python
from gevent import monkey
monkey.patch_all()
import sys
import signal
import os
import platform

import click

sync_service = None


def signal_handler(signum, frame):
    print 'Signal handler called with signal', signum
    sync_service.stop()
    sys.stdout.flush()


@click.command()
@click.option('--env', type=click.Choice(['prod', 'dev', 'test']),
              default='dev',
              help='Loads the corresponding config file for the env.')
@click.option('--process_num', default=0,
              help="This process's number in the process group: a unique "
                   "number satisfying 0 <= process_num < total_processes.")
def main(env, process_num):
    """ Launch the Inbox sync service. """
    global sync_service

    # Load config, make checks before anything
    from inbox.util.startup import preflight
    preflight(env)

    from inbox.log import get_logger, configure_logging
    from inbox.mailsync.service import SyncService

    is_prod = True if env == 'prod' else False
    configure_logging(is_prod)

    total_processes = int(os.environ.get('MAILSYNC_PROCESSES', 1))

    log = get_logger()
    log.info('start',
             components=['mail sync', 'contact sync'],
             host=platform.node(), process_num=process_num,
             total_processes=total_processes,
             recursion_limit=sys.getrecursionlimit())

    # Catch SIGTERM so that we can gracefully exit
    signal.signal(signal.SIGTERM, signal_handler)

    print >>sys.stderr, """
    \033[94m     Welcome to... \033[0m\033[1;95m
      _____       _
     |_   _|     | |
       | |  _ __ | |__   _____  __
       | | | '_ \| '_ \ / _ \ \/ /
      _| |_| | | | |_) | (_) >  <
     |_____|_| |_|_.__/ \___/_/\_\\  \033[0m

     Use CTRL-C to stop.
     """
    sync_service = SyncService(process_num, total_processes)
    sync_service.run()

    print >>sys.stderr, "\033[94mInbox exiting...\033[0m"


if __name__ == '__main__':
    main()
