#!/usr/bin/env python
from gevent import monkey
monkey.patch_all()

import multiprocessing
import os
import platform
import signal
import sys

import affinity
import click
import gevent

# Check that the inbox package is installed. It seems Vagrant may sometimes
# fail to provision the box appropriately; this check is a reasonable
# approximation of "Did the setup script run?"
try:
    from inbox.config import config
except ImportError:
    sys.exit("Could not find Inbox installation. "
             "Maybe the Vagrant box provisioning didn't succeed?\n"
             "Try running sudo ./setup.sh")

from inbox.util.startup import preflight
from inbox.util.debug import trace_greenlets
from inbox.log import get_logger, configure_logging
from inbox.mailsync.service import SyncService

sync_service = None


def signal_handler(signum, frame):
    print 'Signal handler called with signal', signum
    sync_service.stop()
    sys.stdout.flush()


@click.command()
@click.option('--prod/--no-prod', default=False,
              help='Disables the autoreloader and potentially other '
                   'non-production features.')
@click.option('-c', '--config', default=None,
              help='Path to JSON configuration file.')
@click.option('--cpu', default=0,
              type=click.IntRange(min=0, max=multiprocessing.cpu_count()),
              help='The CPU on which this process should execute on. '
                   'NOTE: this value must fall between 0 and the number of '
                   'available CPUs.')
@click.option('--process_num', default=0,
              help="This process's number in the process group: a unique "
                   "number satisfying 0 <= process_num < total_processes.")
def main(prod, cpu, config, process_num):
    """ Launch the Inbox sync service. """
    configure_logging(prod)

    affinity.sched_setaffinity(0, [cpu])

    if config is not None:
        from inbox.util.startup import load_overrides
        config_path = os.path.abspath(config)
        load_overrides(config_path)

    preflight()

    total_processes = int(os.environ.get('MAILSYNC_PROCESSES', 1))

    log = get_logger()
    log.info('start',
             components=['mail sync', 'contact sync'],
             host=platform.node(), cpu=cpu, process_num=process_num,
             total_processes=total_processes,
             recursion_limit=sys.getrecursionlimit())

    # Catch SIGTERM so that we can gracefully exit
    signal.signal(signal.SIGTERM, signal_handler)

    print >>sys.stderr, """
    \033[94m     Welcome to... \033[0m\033[1;95m
      _____       _
     |_   _|     | |
       | |  _ __ | |__   _____  __
       | | | '_ \| '_ \ / _ \ \/ /
      _| |_| | | | |_) | (_) >  <
     |_____|_| |_|_.__/ \___/_/\_\\  \033[0m

     Use CTRL-C to stop.
     """

    gevent.spawn(trace_greenlets)
    global sync_service
    sync_service = SyncService(process_num, total_processes)
    sync_service.run()

    print >>sys.stderr, "\033[94mInbox exiting...\033[0m"


if __name__ == '__main__':
    main()
