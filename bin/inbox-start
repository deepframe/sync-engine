#!/usr/bin/env python
from gevent import monkey; monkey.patch_all()

import sys
import os
import argparse

from inbox.config import config

from inbox.util.startup import preflight

from gevent import joinall, spawn
from setproctitle import setproctitle; setproctitle('inbox')

from inbox.log import (configure_general_logging, get_logger,
                              log_uncaught_errors)
configure_general_logging()
log = get_logger()
preflight()


parser = argparse.ArgumentParser(description="Inbox sync service")

parser.add_argument('--prod', action='store_true', default=False,
                         help="Disables the autoreloader and potentially other"
                         " non-production features.")
parser.add_argument('-c', '--config', dest='config', default=None,
                         help="Path to JSON configuration file.")
args = parser.parse_args()

if args.config:
    from inbox.util.startup import load_overrides
    config_path = os.path.abspath(args.config)
    # TODO expand to full path
    load_overrides(config_path)


def start():
    from inbox.models.tables.base import register_backends
    table_mod_for = register_backends()

    threads = []

    from inbox.util.concurrency import make_zerorpc

    # Start ZeroRPC mail sync server service
    from inbox.mailsync.service import SyncService
    sync_srv_loc = config.get('CRISPIN_SERVER_LOC', None)
    threads.append(make_zerorpc(SyncService, sync_srv_loc))

    # start ZeroRPC search server service
    from inbox.search import SearchService
    search_srv_loc = config.get('SEARCH_SERVER_LOC', None)
    threads.append(make_zerorpc(SearchService, search_srv_loc))

    # start webhook service
    from inbox.transactions.webhook import WebhookService
    webhook_srv_loc = config.get('WEBHOOK_SERVER_LOC', None)
    threads.append(make_zerorpc(WebhookService, webhook_srv_loc))

    from inbox.actions.base import rqworker
    threads.append(spawn(log_uncaught_errors(rqworker)))

    print """
    \033[94m     Welcome to... \033[0m\033[1;95m
      _____       _
     |_   _|     | |
       | |  _ __ | |__   _____  __
       | | | '_ \| '_ \ / _ \ \/ /
      _| |_| | | | |_) | (_) >  <
     |_____|_| |_|_.__/ \___/_/\_\\  \033[0m

     Use CTRL-C to stop.
     """

    log.info("Recursion limit: {0}".format(sys.getrecursionlimit()))

    log.info('Providers currently supported: '\
             '{0}'.format(', '.join(table_mod_for.keys())))

    # hang out forever and run some services
    joinall(threads)

if not args.prod:
    from werkzeug.serving import run_with_reloader
    run_with_reloader(start)
else:
    start()
