#!/usr/bin/env python
from gevent import monkey
monkey.patch_all()

import os
import socket
import platform
import signal
import sys

import click

# Check that the inbox package is installed. It seems Vagrant may sometimes
# fail to provision the box appropriately; this check is a reasonable
# approximation of "Did the setup script run?"
try:
    from inbox.config import config as inbox_config
except ImportError:
    sys.exit("Could not find Inbox installation. "
             "Maybe the Vagrant box provisioning didn't succeed?\n"
             "Try running sudo ./setup.sh")

from inbox.util.startup import preflight
from inbox.util.debug import Tracer
from inbox.log import get_logger, configure_logging
from inbox.mailsync.service import SyncService

sync_service = None

# Set a default timeout for sockets.
SOCKET_TIMEOUT = 2 * 60
socket.setdefaulttimeout(SOCKET_TIMEOUT)


def signal_handler(signum, frame):
    print 'Signal handler called with signal', signum
    sync_service.stop()
    sys.stdout.flush()


@click.command()
@click.option('--prod/--no-prod', default=False,
              help='Disables the autoreloader and potentially other '
                   'non-production features.')
@click.option('--enable-tracer/--disable-tracer', default=True,
              help='Disables the stuck greenlet tracer')
@click.option('-c', '--config', default=None,
              help='Path to JSON configuration file.')
@click.option('--process_num', default=0,
              help="This process's number in the process group: a unique "
                   "number satisfying 0 <= process_num < total_processes.")
def main(prod, enable_tracer, config, process_num):
    """ Launch the Inbox sync service. """
    configure_logging()

    if config is not None:
        from inbox.util.startup import load_overrides
        config_path = os.path.abspath(config)
        load_overrides(config_path)

    if not prod:
        preflight()

    total_processes = int(os.environ.get('MAILSYNC_PROCESSES', 1))

    log = get_logger()
    log.info('start',
             components=['mail sync', 'contact sync'],
             host=platform.node(), process_num=process_num,
             total_processes=total_processes,
             recursion_limit=sys.getrecursionlimit())

    # Catch SIGTERM so that we can gracefully exit
    signal.signal(signal.SIGTERM, signal_handler)

    print >>sys.stderr, """\033[1;95m
      _   _       _
     | \ | |     | |
     |  \| |_   _| | __ _ ___
     | . ` | | | | |/ _` / __|
     | |\  | |_| | | (_| \__ \\
     \_| \_/\__, |_|\__,_|___/
             __/ |
            |___/
\033[0m\033[94m
      S Y N C   E N G I N E \033[0m

     Use CTRL-C to stop.
     """

    if inbox_config.get('FEATURE_FLAGS', []) != []:
        print >>sys.stderr, "Feature flags enabled: {}\n".format(
            ' '.join(inbox_config['FEATURE_FLAGS']))

    if enable_tracer:
        tracer = Tracer(gather_stats=True)
        tracer.start()

    global sync_service
    sync_service = SyncService(process_num, total_processes)
    sync_service.run()

    print >>sys.stderr, "\033[94mInbox exiting...\033[0m"


if __name__ == '__main__':
    main()
