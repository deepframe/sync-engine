#!/usr/bin/env python
# backfill-emailed-events: go through every message for every account and
# add any attached event to the "Emailed events" calendar.
from inbox.models.session import session_scope
from inbox.models.account import Account
from inbox.models.block import Block
from inbox.events.ical import import_attached_events
from flanker import mime
from inbox.sqlalchemy_ext.util import safer_yield_per


with session_scope() as db_session:
    accounts = db_session.query(Account)
    for account in accounts:
        print "Processing account: %s" % account.email_address

        query = db_session.query(Block).filter(
            Block.namespace_id == account.namespace.id,
            Block._content_type_other == "text/calendar")
        for block in safer_yield_per(query, Block.id, 0, 100):
            try:
                import_attached_events(account.id, block.data)
            except MalformedEventError:
                    print ("Malformed event for message %d. "
                           "Ignoring." % message.id)
        db_session.commit()
