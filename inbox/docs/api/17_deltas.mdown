Title: Deltas

The Nilas Sync Engine builds a transaction log that records every change as it sychronizes your users' mailboxes. Your application can use these changes, exposed through the Delta endpoint, to build email applications that process new data quickly without fetching an index of the user's mailbox or performing a large number of API calls.

To use the Delta API, your application needs to maintain a sync `cursor`,
a record of the last change you successfully processed. Each time you perform a
sync, you process the deltas provided by the API and update your stored `cursor`.


# Obtaining a Delta Cursor

The first time you sync using the Delta API, you need to obtain a cursor. The `generate_cursor` API allows you to exchange a unix timestamp for a cursor so you can begin a sync at an arbitrary point in the user's mailbox history. Alternatively, if you want to start consuming the user's entire mailbox history you can set your cursor to `0`.

Once you have a cursor, you should store it and update it as you make sync requests.

```
:::xml
POST https://api.nilas.com/n/<namespace_id>/delta/generate_cursor
```

```
:::json
{
    "start": 1401132646
}
```

**Sample response:**

```
:::json
{
   "cursor": "aqb0llc2ioo0bclh7uxkim9z6"
}
```

# Requesting a Delta

Each time your application syncs with Nilas, you provide the cursor indicating
your position in the user's mailbox history. The API request below returns a
set of JSON objects representing individual changes to the user's mailbox: tag
changes, new messages, etc.

```
:::xml
GET https://api.nilas.com/n/<namespace_id>/delta?cursor=<cursor>
```

**Sample response:**

```
:::json
{
    "cursor_start": "aqb0llc2ioo0bclh7uxkim9z6",
    "cursor_end": "5u9kwbgyq8wgq0iqdakqt7kjl",
    "deltas": [
        {
            "object_id": "aqb0llc2ioo0bclh7uxkim9z6",
            "event": "modify",
            "type": "thread",
            "cursor": "7ciyf89wprvvkw3p9oz86swcs",
            "attributes": {
                "draft_ids": [
                    "diu1tytx7p9wnx64hdbxsypqe"
                ],
                "first_message_timestamp": 1414778436,
                "id": "71ormxuivtg52p141tpgjk3vi",
                "last_message_timestamp": 1414778436,
                "message_ids": [],
                "namespace_id": "f3b0j663wmm2bluq77uc4db9m",
                "object": "thread",
                "participants": [],
                "snippet": "",
                "subject": "Hello World!",
                "tags": [
                    {
                        "id": "drafts",
                        "name": "drafts"
                    },
                    {
                        "id": "starred",
                        "name": "starred"
                    }
                ]
            }
        },
        {
            "id": "2fhs446h1uiomjg2sa7r5n1w6",
            "event": "create",
            "type": "thread",
            "cursor": "9vsuralamrmitihpf2zszmpmd",
            "attributes": {
                "id": "2fhs446h1uiomjg2sa7r5n1w6",
                "last_message_timestamp": 1401132649,
                "message_ids": [
                    "ebszclpialarlf32m1hxdcckk",
                    "duknijxbjxtonwi59p7wd17ew",
                    "e89w5zrh5o7oklc8cp9vjup69"
                ],
                "namespace_id": "ebaa9877yhmaeamqodbmq7rqa",
                "object": "thread",
                "participants": [
                    {
                        "email": "zulip@zulip.com",
                        "name": "Michael Grinich"
                    },
                    {
                        "email": "ben@nilas.com",
                        "name": ""
                    }
                ],
                "subject": "Missed Zulip from Michael Grinich",
                "first_message_timestamp": 1401132649
            }
        },
        {
            "cursor": "9vsuralamrmitihpf2zszmpmd",
            "event": "delete",
            "id": "5oly0nmkfbgnjhw00xa4i0k5l",
            "object": "tag"
        }
    ]
}
```
Each element of the response contains the following fields:

* `"cursor"`: The cursor value for this delta.
* `"object"`: The type of the changed object, e.g., "`message`" or "`thread`".
* `"id"`: The id of the changed object.
* `"event"`: The type of change, either `"create"`, `"modify"` or `"delete"`.
* `"attributes"`: The state of the object when the delta was generated.

After you've processed the deltas, your application should update its stored
`cursor` to the value of `cursor_end` in the response. Nilas may only return the first batch of changes, so it's important to make this API call repeatedly until you receive the same `cursor_end` that you sent (`cursor_start`). This indicates that you have consumed the entire transaction log of the user's mailbox and your application is up-to-date.


# Streaming Delta Updates
The streaming endpoint allows you to get changes in real time, without needing to repeatedly poll. First obtain a delta cursor as described above, and then use it to query the `/delta/streaming` endpoint:

```
:::xml
GET https://api.nilas.com/n/<namespace_id>/delta/streaming?cursor=<cursor>
```

This will start a long-polling HTTP connection. The server will stream deltas
starting from that cursor, but then keep the connection open and continue to
stream new changes.

Each change event has the same format as a single delta above:
```
{
    "cursor": "9vsuralamrmitihpf2zszmpmd",
    "event": "delete",
    "id": "5oly0nmkfbgnjhw00xa4i0k5l",
    "object": "tag"
}
```

If the connection is interrupted or your client goes offline, you can issue
a new query, passing the cursor for the last delta you processed. This ensures
that you don't miss any changes.

# Getting a subset of all changes
If you don't want to get changes for all the API object types, you can pass an
additional parameter `exclude_types` in your request to the `/delta` or
`delta/streaming` endpoint. The response won't contain any change events for
objects of the types that you specify. For example, if your application doesn't
need to know about changes to contacts or calendar events, you can make the
request

```
:::xml
GET
https://api.nilas.com/n/<namespace_id>/delta/streaming?cursor=<cursor>&exclude_types=message,contact
```

The value of `exclude_types` must be a comma-separated list whose elements are
any of `contact`, `event`, `file`, `message`, `tag`, `thread`.
