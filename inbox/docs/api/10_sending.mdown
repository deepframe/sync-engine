Title: Sending

Inbox provides a single API for sending mail:

```
:::xml
POST https://api.inboxapp.com/n/<namespace_id>/send
```

You can use this API in two ways:

#Sending an Existing Draft

Perform a POST request with the POST body below to send an existing draft. If the draft is not already in response to a thread, a new thread will be created. The drafts `state` will change from `draft` to `sending`, and Inbox will attempt to deliver the message through the provider's SMTP gateway. Once the message has been sent, the thread receives the `sent` tag and the drafts `status` becomes `sent`. Sent drafts no longer appear in the user's drafts list, but you can continue to query them by ID to check that the message was delivered successfully.

In rare cases, message delivery can fail if the user's email gateway rejects the message. This could happen for a number of reasons, including illegial attachment data, bad credentials, or rate limiting. Inbox will always return a `200 Success` response to `/send` and continue trying to send the message if the initial attempt fails. To check whether a message has been successfully delivered, see [Confirming Message Delivery](#confirming-message-delivery).

```
:::json
{
    "draft_id": "9nhhb7w3tinsn4zkg9vjr3cxz"
}
```

#Sending a New Message

You can send messages without saving them as drafts beforehand. Instead of providing a draft ID, simply provide the JSON of the message object you want to send.

If the message is in reply to a thread, provide the `reply_to_thread` key with the ID of the existing thread.  Note that you must explicitly specify the message's recipients in the `to`, `cc` and `bcc` fields of the post body; this is to prevent any ambiguity about whom the message will be sent to.

Messages you create or send __should not include quoted text__ when they are in reply to an existing thread.

```
:::json
{
    "reply_to_thread": "84umizq7c4jtrew491brpa6iu",
    "body" : "Sounds great! See you then.",

    "to": [
        {
            "name": "Bill",
            "email": "wbrogers@mit.edu"
        }
    ]
}
```

#Monitoring Message Delivery

The `/send` API returns the JSON of the draft that was queued for delivery, including it's ID.

**Response Body**

```
:::json
{
    "id": "9nhhb7w3tinsn4zkg9vjr3cxz",
    "state": "sending",
    "subject": "Dinner on Friday?",
    "to": [
        {
            "name": "Ben Bitdiddle",
            "email": "ben.bitdiddle@gmail.com"
        }
    ],
    "body": "<html><body>....</body></html>"
    ...
}
```


The draft's `state` attribute allows you to track it's state through the delivery process. You can request the draft object after calling the `/send` API to see if the message has been sent.

```
:::xml
GET /n/<namespace_id>/drafts/<draft_id>
```

**Response Body**

```
:::json
{
    "state": "sent",
    "subject": "Dinner on Friday?",
    "to": [
        {
            "name": "Ben Bitdiddle",
            "email": "ben.bitdiddle@gmail.com",
        }
    ],
    "body": "<html><body>....</body></html>",
    ...
}
```