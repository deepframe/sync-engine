Title: Events

The events endpoint is used to manage events within a calendar.

Each event has a `title` and `description` as well as a list of participants and a [when](#when) object that indicates the time and length of the event.

# Retrieving a specific event's metadata

```
:::xml
GET https://api.nylas.com/n/<namespace_id>/events/<event_id>
```

**Response:**

```
:::json
{
    "object": "event",
    "id": "4ee4xbnx7pxdb9g7c2f8ncyto",
    "calendar_id": "ci0k1wfyv533ccgox4t7uri4h",
    "namespace_id": "14e5bn96uizyuhidhcw5rfrb0",
    "description": null,
    "location": null,
    "participants": [
        {
            "email": "example@gmail.com",
            "name": "Ben Bitdiddle",
            "status": "yes"
        }
    ],
    "read_only": false,
    "title": "Meeting with Ben Bitdiddle",
    "when": {
        "object": "timespan",
        "end_time": 1408123800,
        "start_time": 1408120200
    },
    "busy": true,
    "status": "confirmed", // other possible values: "tentative" and "cancelled"
}
```


# Retrieving many events

This endpoint supports [filters](#filters), which allow you to fetch multiple events matching specific critera.

**Options:**

* **`limit`** (Integer) Maximum number of results to return. Defaults to 100. If `limit` is set too high, a request may fail with HTTP status code 400 to prevent excessively large response bodies.
* **`offset`** (Integer) Zero-based offset to be used with `limit` for pagination of results.
* **`event_id`** Return the event with the given id.
* **`calendar_id`** Return events from the calendar with the given id.
* **`title`** (String) Return events whose title matches the provided value.
* **`description`** (String) Return events whose description matches the provided value.
* **`location`** (String) Return events whose location matches the provided value.
* **`starts_before`** (integer, Unix timestamp) Return events that start before this timestamp.
* **`starts_after`** (integer, Unix timestamp) Return events that start after this timestamp.
* **`ends_before`** (integer, Unix timestamp) Return events that end before this timestamp.
* **`ends_after`** (integer, Unix timestamp) Return events that end after this timestamp.
* **`expand_recurring`** (Boolean) If set to true, expands recurring events into individual event instances.
* **`show_cancelled`** (Boolean) If set to true, also show cancelled events.

For example, the following will limit the number of results to 3.

```
:::xml
GET https://api.nylas.com/n/<namespace_id>/events?limit=3
```

## Recurring events

If requesting recurring events without `expand_recurring`, we will only return the 'master' recurring event, and only if it falls within the requested time range. `recurrence` contains recurrence info in RRULE form; [this tool](http://jakubroztocil.github.io/rrule/) is helpful in understanding the RRULE spec.

For convenience, the `expand_recurring` option will include single instances of a recurring event that fall within the requested time range. These look and behave just like non-recurring events. We recommend using a specific time range with this option.

```
:::xml
GET https://api.nylas.com/n/<namespace_id>/events?expand_recurring=true
```

Currently, these instances of recurring events are read-only.

If the recurring event has individual modifications (overrides), such as a one-off time change, we will return these as individual events regardless of whether `expand_recurring` is set or not.

If `expand_recurring` is not set, we will return one-off cancellations as well as the base event, so that clients can accurately expand the recurrence. A cancellation has the field `cancelled` set to `true`.

# Adding a new event

New events can easily be created with the following API. They are automatically synced back to the provider (e.g., Google Calendar, Microsoft Exchange).

Note that timestamps are expected to be in UTC timezone.

```
:::xml
POST https://api.nylas.com/n/<namespace_id>/events
```

**Sample post body**

```
:::json
{
    "title":"Friday meeting",
    "when" : {
        "start_time": 1407542195,
        "end_time": 1407543195
    },
    "location": "Nylas HQ",
    "calendar_id": "ci0k1wfyv533ccgox4t7uri4h",
    "participants": [
        {
            "email": "example@gmail.com",
            "name": "Ben Bitdiddle"
        }
    ]
}
```

Note that if the `calendar_id` parameter is not provided, then the event will be added to the default calendar.

# Updating / Deleting an existing event

Updating and deleting an event is managed in a similar fashion to other endpoints with the restriction that `read_only` events cannot be updated and events cannot be updated or deleted from a `read_only` calendar.

```
:::xml
PUT https://api.nylas.com/n/<namespace_id>/events/<event_id>
```

**Sample post body**

```
:::json
{
    "location": "Atlas Cafe (updated)",
    "calendar_id": "ci0k1wfyv533ccgox4t7uri4h",
    "participants": [
        {
            "email": "example@gmail.com",
            "name": "Ben Bitdiddle"
        },
        {
            "email": "example2@gmail.com",
            "name": "Alyssa P. Hacker"
        },

    ]
}
```

In the above example, the location of the event is updated and an additional participant is added.

# When

The `when` field on an event can take on one of four forms (described below). Each of these sub-objects contains fields that are either times represented as a unix timestamp in the UTC timezone or dates represented in ISO 8601 format (YYYY-MM-DD).

* **`time`** For a given moment in time which has a `time` field.
* **`timespan`** For a span of time which has a `start_time` and `end_time` field.
* **`date`** For an event on a single day (e.g. a Birthday) which has a `date` field.
* **`datespan`** For an event spanning multiple days which has a `start_date` and `end_date` field.

For example:

American Declaration of Independence:
```
:::json
{
    "object": "date",
    "date": "1776-07-04"
}
```


Alan Turing's lifespan would be represented with the following object:
```
:::json
{
    "object": "datespan",
    "start_date": "1912-06-23",
    "end_date": "1954-06-07"
}
```

The 2014 San Francisco earthquake:
```
:::json
{
    "object": "time",
    "time": 1408875644
}
```

The last NylasHQ Monday meeting:
```
:::json
{
    "object": "time",
    "start_time": 1409594400,
    "end_time": 1409598000
}
```

