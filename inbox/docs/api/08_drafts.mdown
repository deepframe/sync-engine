Title: Drafts

A draft is a special kind of message which has not been sent, and therefore its body contents are mutable. Once sent, the body cannot be changed. Draft objects are identical to message objects sent via the API, except that they have two additional parameters:

1. A `state` parameter. The `state` parameter has three states:

- `draft`: The default state.
- `sending`: The draft has been queued for sending using the [Sending](#sending) API.
- `sent`: The draft has been successfully sent.

2. A `version` parameter that refers to a particular revision. 
A draft has an unchanging ID but each revision to it receives a new version. Having a constant ID is useful for caching and
repeated querying, while the unique version is used to prevent conflicting operations.


# Retrieving Drafts

```
:::xml
GET  https://api.inboxapp.com/n/<namespace_id>/drafts
GET  https://api.inboxapp.com/n/<namespace_id>/drafts/<draft_id>
```

# Creating a Draft

```
:::xml
POST https://api.inboxapp.com/n/<namespace_id>/drafts
```

Post body parameters:

* `subject`
* `to`
* `cc`
* `bcc`
* `reply_to_thread`
* `body`
* `files`

Note that all of these parameters are optional. If omitted, an empty draft will still be created.


**Sample Post Body**

```
:::json
{
    "subject": "Dinner on Friday?",
    "to": [
        {
            "name": "Ben Bitdiddle",
            "email": "ben.bitdiddle@gmail.com"
        },
    ],
    "cc": [],
    "bcc": [],
    "body": "<html><body>....</body></html>",
    "files": [
        "bgmzg0qp61oqrrmpadboiiyg3",
        "aikfl1kl73r69hevrm018jqzw"
    ]
    "version": "evrm018jqzwbgmzg0qp61oqrr"
}
```

A successful response will contain the newly created [Draft](#draft) object.

Also note that creating a draft will fail if the referenced `files` ids have not been uploaded. See [Files](#files) for more details on how to upload and reference attachments.


## Replying to an existing thread

If the draft is a response to an existing thread, you should provide the thread's ID in the `reply_to_thread` parameter and omit the `subject` parameter. Note that you must explicitly specify the message's recipients in the `to`, `cc` and `bcc` fields of the post body; this is to prevent any ambiguity about whom the message will be sent to.

Messages you create or send __should not include quoted text__ when they are in reply to an existing thread.

```
:::json
{
    "reply_to_thread": <thread_id>,
    "body": "<html><body>....</body></html>",
    "to": [
        {
            "name": "Bill Rogers",
            "email": "wbrogers@mit.edu"
        }
    ],
    "files": [
        <file_object>,
        ...
    ],
}
```


# Updating a draft

Updating a draft is as simple as issuing a POST request to the draft's URI.

```
:::xml
POST https://api.inboxapp.com/n/<namespace_id>/drafts/<draft_id>
```

Post body parameters:

* `version`

The request body must contain the version of the draft you wish to update.
Other fields are optional and will overwrite previous values.

Updating a draft returns a new draft object with the same ID but different version. When submitting subsequent send or save actions, you must use this new version.

# Deleting a draft

To delete a draft simply issue a DELETE request to the draft's URI.

```
:::xml
DELETE https://api.inboxapp.com/n/<namespace_id>/drafts/<draft_id>
```

Delete body parameters:

* `version`

The request body must contain the version of the draft you wish to delete.
If the draft does not exist, this request will fail.


# Sending a draft

The Inbox API provides a single API for sending both new messages and existing drafts. See [Sending](#sending) for more information.


# Listing Threads with Drafts

In some scenarios, you may want to display all of the threads in the user's inbox that have draft messages. To get a list of all threads with drafts, use the [Threads](#threads) API call with a [filter](#filters) on the `draft` tag:

```
:::xml
GET https://api.inboxapp.com/n/<namespace_id>/threads?tag=drafts
```

